/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  MxmindIframeView: () => MxmindIframeView,
  VIEW_TYPE_EXAMPLE: () => VIEW_TYPE_EXAMPLE,
  default: () => MxmindPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var iframe = null;
var ready = false;
var VIEW_TYPE_EXAMPLE = "mxmind-view";
function getTheme() {
  return document.body.hasClass("theme-dark") ? "dark" : "light";
}
function getLanguage() {
  const locale = import_obsidian.moment.locale();
  const arr = locale.split("-");
  if (arr[1]) {
    arr[1] = arr[1].toString().toUpperCase();
  }
  return arr.join("-");
}
var getUrl = () => {
  return "https://mxmind.com/mindmap/new?utm_source=obsidian&utm_medium=plugin&theme=" + getTheme() + "&lng=" + getLanguage();
};
async function file2mindmap(file) {
  const content = await this.app.vault.cachedRead(file);
  const post = async () => {
    postIframeMessage("loadFromMd", [content]);
  };
  waitEditor().then(post).catch(post);
}
var MxmindPlugin = class extends import_obsidian.Plugin {
  //settings: MyPluginSettings;
  async onload() {
    this.registerView(
      VIEW_TYPE_EXAMPLE,
      (leaf) => new MxmindIframeView(leaf)
    );
    const ribbonIconEl = this.addRibbonIcon(
      "network",
      "Mxmind",
      async (evt) => {
        this.toggleView();
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension == "md") {
          await this.activateView();
          await file2mindmap(activeFile);
        }
      }
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        const extension = file.extension;
        if (!extension || extension != "md")
          return;
        if (!(file instanceof import_obsidian.TFile))
          return;
        menu.addItem((item) => {
          item.setTitle(trans("Open as mindmap")).setIcon("document").onClick(async () => {
            await this.activateView();
            await file2mindmap(file);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("css-change", () => {
        postIframeMessage("setTheme", [getTheme()]);
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", async (file) => {
        if (!ready)
          return;
        await file2mindmap(file);
      })
    );
  }
  onunload() {
  }
  async toggleView() {
    const { workspace } = this.app;
    const rightSplit = this.app.workspace.rightSplit;
    if (rightSplit.collapsed)
      rightSplit.expand();
    const existingLeaf = workspace.getLeavesOfType(VIEW_TYPE_EXAMPLE).first();
    if (existingLeaf) {
      workspace.revealLeaf(existingLeaf);
    } else {
      const leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: VIEW_TYPE_EXAMPLE
        });
        workspace.revealLeaf(leaf);
      }
    }
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_EXAMPLE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
    }
    await leaf.setViewState({ type: VIEW_TYPE_EXAMPLE, active: true });
    workspace.revealLeaf(leaf);
    return leaf;
  }
  toggleCollapseRight() {
    const rightSplit = this.app.workspace.rightSplit;
    rightSplit.collapsed ? rightSplit.expand() : rightSplit.collapse();
  }
  activeLeafPath(workspace) {
    var _a;
    return (_a = workspace.activeLeaf) == null ? void 0 : _a.view.getState().file;
  }
  activeLeafName(workspace) {
    var _a;
    return (_a = workspace.activeLeaf) == null ? void 0 : _a.getDisplayText();
  }
};
var MxmindIframeView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
    this.navigation = true;
  }
  getViewType() {
    return VIEW_TYPE_EXAMPLE;
  }
  getDisplayText() {
    return "Mxmind";
  }
  getIcon() {
    return "network";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const int = setInterval(() => {
      if (this.leaf.tabHeaderEl && this.leaf.tabHeaderEl.parentElement) {
        clearInterval(int);
        console.log(this.leaf.tabHeaderEl.parentElement);
      }
    }, 100);
    container.setAttribute(
      "style",
      import_obsidian.Platform.isMobile ? "padding:0;overflow:hidden;" : "padding:0;padding-bottom:30px;overflow:hidden;"
    );
    container.createEl(
      "iframe",
      {
        cls: "mxmind-iframe",
        attr: {
          style: "width:100%;height:100%;",
          src: getUrl(),
          frameborder: "0",
          allow: "accelerometer;gyroscope"
        }
      },
      (el) => {
        iframe = el;
      }
    );
    container.win.onmessage = async (event) => {
      if (event.data.event && event.data.event == "editor-ready") {
        ready = true;
      }
      if (event.data.method == "exportDataUrl") {
        const rsp = await fetch(event.data.result);
        const item = new ClipboardItem({ "image/png": rsp.blob() });
        navigator.clipboard.write([item]);
        new import_obsidian.Notice(trans("Image copied to the clipboard."));
      }
    };
  }
  async onClose() {
    ready = false;
  }
  onPaneMenu(menu, source) {
    menu.addItem(
      (item) => item.setIcon("image-file").setTitle(trans("Copy image")).onClick(() => {
        var _a;
        (_a = iframe == null ? void 0 : iframe.contentWindow) == null ? void 0 : _a.postMessage(
          {
            method: "exportDataUrl",
            params: []
          },
          "*"
        );
      })
    );
  }
};
function waitEditor() {
  return new Promise((resolve, reject) => {
    if (ready) {
      resolve(true);
    } else {
      const t = new Date().getTime();
      const int = setInterval(() => {
        if (ready) {
          clearInterval(int);
          resolve(true);
        } else {
          if (new Date().getTime() - t > 10 * 1e3) {
            clearInterval(int);
            reject(false);
          }
        }
      }, 100);
    }
  });
}
function postIframeMessage(method, params) {
  var _a;
  if (!iframe)
    return;
  (_a = iframe == null ? void 0 : iframe.contentWindow) == null ? void 0 : _a.postMessage(
    {
      method,
      params
    },
    "*"
  );
}
function trans(str) {
  const cn = {
    "Copy image": "\u590D\u5236\u56FE\u7247",
    "Open as mindmap": "\u8F6C\u4E3A\u601D\u7EF4\u5BFC\u56FE",
    "Image copied to the clipboard.": "\u56FE\u7247\u5DF2\u7ECF\u590D\u5236\u5230\u526A\u5207\u677F\u3002"
  };
  if (import_obsidian.moment.locale().includes("zh")) {
    return cn[str] || str;
  }
  return str;
}


/* nosourcemap */